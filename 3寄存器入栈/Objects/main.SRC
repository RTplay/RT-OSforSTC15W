; .\Objects\main.SRC generated from: main.c
; COMPILER INVOKED BY:
;        D:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(0,SPEED) BROWSE INCDIR(.\bsp) DEFINE(STACK_DETECT_MODE) DEBUG OBJECTEXTEND CODE PRINT(.\Listings\main.lst) SRC(.\Objects\main.SRC)

$NOMOD51

NAME	MAIN

CCF2	BIT	0D8H.2
ACC7	BIT	0E0H.7
P0M1	DATA	093H
P1M0	DATA	092H
P2M0	DATA	096H
P1M1	DATA	091H
P0	DATA	080H
P3M0	DATA	0B2H
P2M1	DATA	095H
P1	DATA	090H
P4M0	DATA	0B4H
P3M1	DATA	0B1H
P2	DATA	0A0H
P5M0	DATA	0CAH
P4M1	DATA	0B3H
P3	DATA	0B0H
WKTCH	DATA	0ABH
T0	BIT	0B0H.4
AC	BIT	0D0H.6
P6M0	DATA	0CCH
P5M1	DATA	0C9H
P4	DATA	0C0H
CLKOUT0	BIT	0B0H.5
T1	BIT	0B0H.5
P7M0	DATA	0E2H
P6M1	DATA	0CBH
P5	DATA	0C8H
ISP_TRIG	DATA	0C6H
EA	BIT	0A8H.7
CLKOUT1	BIT	0B0H.4
SPI_SS_2	BIT	0A0H.4
P6	DATA	0E8H
P7M1	DATA	0E1H
SPI_SS_3	BIT	0C8H.4
SPI_MISO	BIT	090H.4
SPI_MOSI	BIT	090H.3
CCP0	BIT	090H.1
P7	DATA	0F8H
WKTCL	DATA	0AAH
CCP1	BIT	090H.0
SPCTL	DATA	0CEH
CF	BIT	0D8H.7
CCP2	BIT	0B0H.7
CH	DATA	0F9H
P_SW1	DATA	0A2H
P_SW2	DATA	0BAH
EADC	BIT	0A8H.5
SPI_SCLK_2	BIT	0A0H.1
IE	DATA	0A8H
SPI_SCLK_3	BIT	0C0H.3
CL	DATA	0E9H
IAP_CMD	DATA	0C5H
CCAP0H	DATA	0FAH
CCAP1H	DATA	0FBH
CCAP2H	DATA	0FCH
ADC_RES	DATA	0BDH
IPH2	DATA	0B6H
CR	BIT	0D8H.6
CCAP0L	DATA	0EAH
RD	BIT	0B0H.7
CCAP1L	DATA	0EBH
CCAPM0	DATA	0DAH
CCAP2L	DATA	0ECH
CCAPM1	DATA	0DBH
ES	BIT	0A8H.4
CCAPM2	DATA	0DCH
PADC	BIT	0B8H.5
SPI_MISO_2	BIT	0A0H.2
SPI_MOSI_2	BIT	0A0H.3
IP	DATA	0B8H
SPI_MISO_3	BIT	0C0H.1
SPI_MOSI_3	BIT	0C0H.0
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
CLK_DIV	DATA	097H
IAP_ADDRH	DATA	0C3H
RXD2	BIT	090H.0
ISP_CMD	DATA	0C5H
PS	BIT	0B8H.4
TXD2	BIT	090H.1
SP	DATA	081H
CMOD	DATA	0D9H
CCON	DATA	0D8H
IAP_ADDRL	DATA	0C4H
PPCA	BIT	0B8H.7
OV	BIT	0D0H.2
WR	BIT	0B0H.6
ELVD	BIT	0A8H.6
P00	BIT	080H.0
P10	BIT	090H.0
P01	BIT	080H.1
ADC_CONTR	DATA	0BCH
SBUF	DATA	099H
PCON	DATA	087H
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
ISP_ADDRH	DATA	0C3H
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
P40	BIT	0C0H.0
P31	BIT	0B0H.1
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
SCON	DATA	098H
WAKE_CLKO	DATA	08FH
P50	BIT	0C8H.0
P41	BIT	0C0H.1
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
P05	BIT	080H.5
TMOD	DATA	089H
TCON	DATA	088H
P51	BIT	0C8H.1
P42	BIT	0C0H.2
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
ISP_ADDRL	DATA	0C4H
PLVD	BIT	0B8H.6
P52	BIT	0C8H.2
P43	BIT	0C0H.3
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P53	BIT	0C8H.3
P44	BIT	0C0H.4
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P54	BIT	0C8H.4
P45	BIT	0C0H.5
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P55	BIT	0C8H.5
P46	BIT	0C0H.6
P37	BIT	0B0H.7
P56	BIT	0C8H.6
P47	BIT	0C0H.7
P57	BIT	0C8H.7
IE0	BIT	088H.1
BUS_SPEED	DATA	0A1H
IE1	BIT	088H.3
IE2	DATA	0AFH
B	DATA	0F0H
AUXR	DATA	08EH
IAP_CONTR	DATA	0C7H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
TF1	BIT	088H.7
IP2	DATA	0B5H
RL_TH0	DATA	08CH
RB8	BIT	098H.2
RL_TH1	DATA	08DH
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
RL_T2H	DATA	0D6H
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
RL_T3H	DATA	0D4H
TH2	DATA	0D6H
T2H	DATA	0D6H
P	BIT	0D0H.0
RL_T4H	DATA	0D2H
TH3	DATA	0D4H
T3H	DATA	0D4H
RL_TL0	DATA	08AH
SM0	BIT	098H.7
TH4	DATA	0D2H
T4H	DATA	0D2H
RL_TL1	DATA	08BH
TL0	DATA	08AH
SM1	BIT	098H.6
RL_T2L	DATA	0D7H
TL1	DATA	08BH
SM2	BIT	098H.5
RL_T3L	DATA	0D5H
TL2	DATA	0D7H
T2L	DATA	0D7H
RL_T4L	DATA	0D3H
TL3	DATA	0D5H
T3L	DATA	0D5H
PT0	BIT	0B8H.1
TL4	DATA	0D3H
T4L	DATA	0D3H
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
ISP_CONTR	DATA	0C7H
TR0	BIT	088H.4
RS1	BIT	0D0H.4
IAP_DATA	DATA	0C2H
TR1	BIT	088H.6
PX0	BIT	0B8H.0
WDT_CONTR	DATA	0C1H
PX1	BIT	0B8H.2
PCA_PWM0	DATA	0F2H
PCA_PWM1	DATA	0F3H
PCA_PWM2	DATA	0F4H
P1ASF	DATA	09DH
DPH	DATA	083H
T4T3M	DATA	0D1H
ADC_RESL	DATA	0BEH
DPL	DATA	082H
SPSTAT	DATA	0CDH
IPH	DATA	0B7H
S2BUF	DATA	09BH
PCON2	DATA	097H
S3BUF	DATA	0ADH
REN	BIT	098H.4
S4BUF	DATA	085H
S2CON	DATA	09AH
S3CON	DATA	0ACH
ISP_DATA	DATA	0C2H
S4CON	DATA	084H
SADEN	DATA	0B9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
B0	BIT	0F0H.0
B1	BIT	0F0H.1
IAP_TRIG	DATA	0C6H
AUXR1	DATA	0A2H
B2	BIT	0F0H.2
SPI_SS	BIT	090H.2
AUXR2	DATA	08FH
B3	BIT	0F0H.3
B4	BIT	0F0H.4
F0	BIT	0D0H.5
B5	BIT	0F0H.5
F1	BIT	0D0H.1
INT_CLKO	DATA	08FH
B6	BIT	0F0H.6
ACC0	BIT	0E0H.0
B7	BIT	0F0H.7
ACC1	BIT	0E0H.1
ACC2	BIT	0E0H.2
ACC3	BIT	0E0H.3
PSW	DATA	0D0H
ACC4	BIT	0E0H.4
SPI_SCLK	BIT	090H.5
CCF0	BIT	0D8H.0
ACC5	BIT	0E0H.5
CCF1	BIT	0D8H.1
ACC6	BIT	0E0H.6
SPDAT	DATA	0CFH
P0M0	DATA	094H
?PR?_start_task_with_stack?MAIN          SEGMENT CODE 
?XD?_start_task_with_stack?MAIN          SEGMENT XDATA 
?PR?_get_stack_used?MAIN                 SEGMENT CODE 
?XD?_get_stack_used?MAIN                 SEGMENT XDATA 
?PR?task_0?MAIN      SEGMENT CODE 
?XD?task_0?MAIN      SEGMENT XDATA 
?PR?OS_TASK_SW?MAIN  SEGMENT CODE 
?PR?main?MAIN        SEGMENT CODE 
?PR?int0_int?MAIN    SEGMENT CODE 
?XD?int0_int?MAIN    SEGMENT XDATA 
?ID?MAIN             SEGMENT IDATA 
?XD?MAIN             SEGMENT XDATA 
	EXTRN	CODE (_delay_ms)
	EXTRN	CODE (?C?CSTOPTR)
	EXTRN	CODE (?C?ILDIX)
	EXTRN	CODE (?C?CSTPTR)
	EXTRN	CODE (?C?CLDOPTR)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	os_task_stack_top
	PUBLIC	stack
	PUBLIC	int0_int
	PUBLIC	main
	PUBLIC	OS_TASK_SW
	PUBLIC	task_0
	PUBLIC	_get_stack_used
	PUBLIC	?_start_task_with_stack?BYTE
	PUBLIC	_start_task_with_stack

	RSEG  ?XD?int0_int?MAIN
?int0_int?BYTE:
          i?549:   DS   1
	ORG  1
    counter?550:   DS   2

	RSEG  ?XD?task_0?MAIN
?task_0?BYTE:
 stack_used?248:   DS   1

	RSEG  ?XD?_get_stack_used?MAIN
?_get_stack_used?BYTE:
     pstack?144:   DS   3
	ORG  3
 stack_size?145:   DS   1
	ORG  4
          i?146:   DS   1
	ORG  5
     unused?147:   DS   1

	RSEG  ?XD?_start_task_with_stack?MAIN
?_start_task_with_stack?BYTE:
       pfun?040:   DS   3
	ORG  3
     pstack?041:   DS   3
	ORG  6
 stack_size?042:   DS   1
	ORG  7
          i?043:   DS   1

	RSEG  ?ID?MAIN
          stack:   DS   20

	RSEG  ?XD?MAIN
os_task_stack_top:   DS   1
; #include	"config.h"
; #include    "RT-OS_type.h"
; #include	"delay.h"
; 
; #define TASK0_STACK_LEN 20
; STACK_TYPE stack[TASK0_STACK_LEN]; //建立一个 20 字节的静态区堆栈
; u8 os_task_stack_top; //记录堆栈顶部地址
; 
; void OS_TASK_SW(void);
; 
; void start_task_with_stack(void (*pfun)(), u8 *pstack, u8 stack_size)

	RSEG  ?PR?_start_task_with_stack?MAIN
_start_task_with_stack:
	USING	0
			; SOURCE LINE # 11
	MOV  	DPTR,#pfun?040
	MOV  	A,R3
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R2
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R1
	MOVX 	@DPTR,A
; {
			; SOURCE LINE # 12
; #ifdef STACK_DETECT_MODE
;     u8 i = 0;
			; SOURCE LINE # 14
	MOV  	DPTR,#i?043
	CLR  	A
	MOVX 	@DPTR,A
;     for (; i<stack_size; i++)
			; SOURCE LINE # 15
?C0001:
	MOV  	DPTR,#stack_size?042
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#i?043
	MOVX 	A,@DPTR
	MOV  	R6,A
	MOV  	A,R6
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0002
;         pstack[i] = STACK_MAGIC;
			; SOURCE LINE # 16
	MOV  	DPTR,#pstack?041
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	MOV  	DPTR,#i?043
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPL,R7
	MOV  	DPH,#00H
	MOV  	A,#0ACH
	LCALL	?C?CSTOPTR
	MOV  	DPTR,#i?043
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	SJMP 	?C0001
?C0002:
; #else
;     stack_size = stack_size; //消除编译警告
; #endif
;     *pstack++ = (unsigned int)pfun; //将函数的地址高位压入堆栈，
			; SOURCE LINE # 20
	MOV  	DPTR,#pfun?040
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	MOV  	R6,AR2
	MOV  	R7,AR1
	MOV  	DPTR,#pstack?041
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	CLR  	A
	MOV  	B,#01H
	LCALL	?C?ILDIX
	MOV  	R1,B
	MOV  	R2,A
	MOV  	A,R7
	LCALL	?C?CSTPTR
;     *pstack = (unsigned int)pfun>>8; //将函数的地址低位压入堆栈，
			; SOURCE LINE # 21
	MOV  	DPTR,#pfun?040
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	MOV  	R6,AR2
	MOV  	R7,AR1
	MOV  	A,R6
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	DPTR,#pstack?041
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	MOV  	A,R7
	LCALL	?C?CSTPTR
;     SP = (u8)pstack; //将堆栈指针指向人工堆栈的栈顶
			; SOURCE LINE # 22
	MOV  	DPTR,#pstack?041
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	MOV  	R7,AR1
	MOV  	SP,R7
; }
			; SOURCE LINE # 23
	RET  	
; END OF _start_task_with_stack

; 
; #ifdef STACK_DETECT_MODE
; u8 get_stack_used(u8 *pstack, u8 stack_size)

	RSEG  ?PR?_get_stack_used?MAIN
_get_stack_used:
	USING	0
			; SOURCE LINE # 26
	MOV  	DPTR,#pstack?144
	MOV  	A,R3
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R2
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R1
	MOVX 	@DPTR,A
	MOV  	DPTR,#stack_size?145
	MOV  	A,R5
	MOVX 	@DPTR,A
; {
			; SOURCE LINE # 27
;     u8 i = stack_size-1;
			; SOURCE LINE # 28
	MOV  	DPTR,#stack_size?145
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	DEC  	A
	MOV  	R7,A
	MOV  	DPTR,#i?146
	MOV  	A,R7
	MOVX 	@DPTR,A
;     u8 unused = 0;
			; SOURCE LINE # 29
	MOV  	DPTR,#unused?147
	CLR  	A
	MOVX 	@DPTR,A
?C0005:
;     while (STACK_MAGIC == pstack[i]) {
			; SOURCE LINE # 30
	MOV  	DPTR,#pstack?144
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	MOV  	DPTR,#i?146
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPL,R7
	MOV  	DPH,#00H
	LCALL	?C?CLDOPTR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	A,R7
	XRL  	A,#0ACH
	ORL  	A,R6
	JNZ  	?C0006
;         unused++;
			; SOURCE LINE # 31
	MOV  	DPTR,#unused?147
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
;         if (0 == i)
			; SOURCE LINE # 32
	MOV  	DPTR,#i?146
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	A,R7
	ORL  	A,R6
	JZ   	?C0006
;             break;
			; SOURCE LINE # 33
;         else
;             i--;
			; SOURCE LINE # 35
	MOV  	DPTR,#i?146
	MOVX 	A,@DPTR
	DEC  	A
	MOVX 	@DPTR,A
;     }
			; SOURCE LINE # 36
	SJMP 	?C0005
?C0006:
;     return stack_size - unused;
			; SOURCE LINE # 37
	MOV  	DPTR,#unused?147
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#stack_size?145
	MOVX 	A,@DPTR
	MOV  	R6,A
	CLR  	C
	MOV  	A,R6
	SUBB 	A,R7
	MOV  	R7,A
; }
			; SOURCE LINE # 38
	RET  	
; END OF _get_stack_used

; #endif
; 
; void task_0(void)

	RSEG  ?PR?task_0?MAIN
task_0:
	USING	0
			; SOURCE LINE # 41
; {
			; SOURCE LINE # 42
?C0010:
;     u8 stack_used;
;     while (1) {
			; SOURCE LINE # 44
;         delay_ms(100);
			; SOURCE LINE # 45
	MOV  	R7,#064H
	LCALL	_delay_ms
; #ifdef STACK_DETECT_MODE
;         stack_used = get_stack_used(stack, TASK0_STACK_LEN);
			; SOURCE LINE # 47
	MOV  	R3,#00H
	MOV  	R2,#HIGH (stack)
	MOV  	R1,#LOW (stack)
	MOV  	R5,#014H
	LCALL	_get_stack_used
	MOV  	DPTR,#stack_used?248
	MOV  	A,R7
	MOVX 	@DPTR,A
; #endif
;         OS_TASK_SW();
			; SOURCE LINE # 49
	LCALL	OS_TASK_SW
;     }
			; SOURCE LINE # 50
	SJMP 	?C0010
	RET  	
; END OF task_0

; }
; 
; void OS_TASK_SW(void)

	RSEG  ?PR?OS_TASK_SW?MAIN
OS_TASK_SW:
	USING	0
			; SOURCE LINE # 53
; {
			; SOURCE LINE # 54
;     EA=0;
			; SOURCE LINE # 55
	CLR  	EA
; 
; #pragma asm
;     PUSH     ACC
	  PUSH     ACC
;     PUSH     B
	  PUSH     B
;     PUSH     DPH
	  PUSH     DPH
;     PUSH     DPL
	  PUSH     DPL
;     PUSH     PSW
	  PUSH     PSW
;     MOV      PSW,#00H
	  MOV      PSW,#00H
;     PUSH     AR0
	  PUSH     AR0
;     PUSH     AR1
	  PUSH     AR1
;     PUSH     AR2
	  PUSH     AR2
;     PUSH     AR3
	  PUSH     AR3
;     PUSH     AR4
	  PUSH     AR4
;     PUSH     AR5
	  PUSH     AR5
;     PUSH     AR6
	  PUSH     AR6
;     PUSH     AR7
	  PUSH     AR7
; #pragma endasm
;     os_task_stack_top = SP;
			; SOURCE LINE # 73
	MOV  	DPTR,#os_task_stack_top
	MOV  	A,SP
	MOVX 	@DPTR,A
; //切换任务栈
;     SP = os_task_stack_top;
			; SOURCE LINE # 75
	MOV  	DPTR,#os_task_stack_top
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	SP,R7
; #pragma asm
;     POP      AR7
	  POP      AR7
;     POP      AR6
	  POP      AR6
;     POP      AR5
	  POP      AR5
;     POP      AR4
	  POP      AR4
;     POP      AR3
	  POP      AR3
;     POP      AR2
	  POP      AR2
;     POP      AR1
	  POP      AR1
;     POP      AR0
	  POP      AR0
;     POP      PSW
	  POP      PSW
;     POP      DPL
	  POP      DPL
;     POP      DPH
	  POP      DPH
;     POP      B
	  POP      B
;     POP      ACC
	  POP      ACC
; #pragma endasm
; 
;     EA=1;
			; SOURCE LINE # 92
	SETB 	EA
; }
			; SOURCE LINE # 93
	RET  	
; END OF OS_TASK_SW

; 
; /******************** 主函数 **************************/
; void main(void)

	RSEG  ?PR?main?MAIN
main:
	USING	0
			; SOURCE LINE # 96
; {
			; SOURCE LINE # 97
; 
;     start_task_with_stack(task_0, stack, TASK0_STACK_LEN);
			; SOURCE LINE # 99
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (task_0)
	MOV  	R1,#LOW (task_0)
	PUSH 	AR3
	PUSH 	AR2
	PUSH 	AR1
	MOV  	R3,#00H
	MOV  	R2,#HIGH (stack)
	MOV  	R1,#LOW (stack)
	MOV  	DPTR,#?_start_task_with_stack?BYTE+03H
	MOV  	A,R3
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R2
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R1
	MOVX 	@DPTR,A
	MOV  	DPTR,#?_start_task_with_stack?BYTE+06H
	MOV  	A,#014H
	MOVX 	@DPTR,A
	POP  	AR1
	POP  	AR2
	POP  	AR3
	LCALL	_start_task_with_stack
; }
			; SOURCE LINE # 100
	RET  	
; END OF main

CSEG	AT	00003H
	LJMP	int0_int

; 
; void int0_int (void) interrupt INT0_VECTOR {

	RSEG  ?PR?int0_int?MAIN
	USING	0
int0_int:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 102
;     u8 i;
;     unsigned int counter = 0xffff;
			; SOURCE LINE # 104
	MOV  	DPTR,#counter?550
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
;     EA = 0;
			; SOURCE LINE # 105
	CLR  	EA
;     IE0 = 0;
			; SOURCE LINE # 106
	CLR  	IE0
;     for(i=0; i<5; i++) {
			; SOURCE LINE # 107
	MOV  	DPTR,#i?549
	CLR  	A
	MOVX 	@DPTR,A
?C0015:
	MOV  	DPTR,#i?549
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	CLR  	C
	MOV  	A,R7
	SUBB 	A,#05H
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0021
;         counter = 0x0fff;
			; SOURCE LINE # 108
	MOV  	DPTR,#counter?550
	MOV  	A,#0FH
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
?C0018:
;         while( (~IE0) && (counter--) );
			; SOURCE LINE # 109
	MOV  	C,IE0
	CPL  	C
	JNC  	?C0019
	MOV  	DPTR,#counter?550
	MOV  	A,#0FFH
	MOV  	B,#0FFH
	LCALL	?C?ILDIX
	MOV  	R7,B
	MOV  	R6,A
	MOV  	A,R7
	ORL  	A,R6
	JNZ  	?C0018
?C0019:
;         if(IE0) {
			; SOURCE LINE # 110
	JNB  	IE0,?C0020
;             IE0=0;
			; SOURCE LINE # 111
	CLR  	IE0
;         }
			; SOURCE LINE # 112
?C0020:
;         EA = 1;
			; SOURCE LINE # 113
	SETB 	EA
;     }
			; SOURCE LINE # 114
	MOV  	DPTR,#i?549
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	SJMP 	?C0015
; }
			; SOURCE LINE # 115
?C0021:
	POP  	AR7
	POP  	AR6
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF int0_int

	END
